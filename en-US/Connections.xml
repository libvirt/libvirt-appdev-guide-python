<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE bookinfo PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Libvirt_Application_Development_Guide_Using_Python.ent">
%BOOK_ENTITIES;
]>
<chapter id="libvirt_application_development_guide_using_python-Connections">
    <title>Connections</title>
    <indexterm><primary>Connections</primary></indexterm>
    <para>
        In libvirt, a connection is the underpinning of every action and
        object in the system. Every entity that wants to interact with
        libvirt, be it virsh, virt-manager, or a program using the libvirt
        library, needs to first obtain a connection to the libvirt daemon on
        the host it is interested in interacting with. A connection describes
        not only the type of virtualization technology that the agent wants to
        interact with (qemu, xen, uml, etc), but also describes any
        authentication methods necessary to connect to that resource.
    </para>
    <section id="libvirt_application_development_guide_using_python-Connections-Overview">
        <title>Overview</title>
        <indexterm><primary>virInitialize</primary></indexterm>
        <indexterm><primary>Functions</primary>
        <secondary>virInitialize</secondary></indexterm>
        <para>
            The very first thing a libvirt agent must do is call the <literal>virInitialize</literal> function, or
            one of the Python libvirt connection functions to obtain an instance of the <literal>virConnect</literal>
            class. This instance will be used in subsequent operations. The Python libvirt module
            provides 3 different functions for connecting to a resource:
        </para>
        <programlisting language="Python">conn = libvirt.open(name)
conn = libvirt.openAuth(uri, auth, flags)
conn = libvirt.openReadOnly(name)</programlisting>
        <para>
            In all three cases there is a <literal>name</literal> parameter
            which in fact refers to the URI of the hypervisor to connect
            to. The previous sections <xref linkend="libvirt_application_development_guide_using_python-Architecture-Driver_Model"/>
            and <xref linkend="libvirt_application_development_guide_using_python-Connections-Remote_URIs"/> provide
            full details on the various URI formats that are acceptable.
            If the URI is <code language="Python">None</code>
            then libvirt will apply some heuristics and probe for a suitable
            hypervisor driver. While this may be convenient for developers doing
            adhoc testing, it is strongly recommended that applications do not
            rely on probing logic since it may change at any time. Applications
            should always explicitly request which hypervisor connection is
            desired by providing a URI.
        </para>
        <para>
            The difference between the three methods outlined above is the way in
            which they authenticate and the resulting authorization level they
            provide.
        </para>

        <section>
            <title>open</title>
            <indexterm><primary>open, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>open</secondary></indexterm>
            <para>
                The <literal>open</literal> function will attempt to open a
                connection for full read-write access. It does not have any scope for
                authentication callbacks to be provided, so it will only succeed for
                connections where authentication can be done based on the credentials
                of the application.
            </para>
            <example>
                <title>Using open</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-1.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
            <para>
                The above example opens up a read-write connection to the system qemu hypervisor driver,
                checks to make sure it was successful, and if so closes the connection. For more information
                on libvirt URIs, refer to
                <xref linkend="libvirt_application_development_guide_using_python-Connections-URI_Formats" />.
            </para>
        </section>

        <section>
            <title>openReadOnly</title>
            <indexterm><primary>openReadOnly, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>openReadOnly</secondary></indexterm>
            <para>
                The <literal>openReadOnly</literal> function will attempt to open a connection
                for read-only access. Such a connection has a restricted set of method
                calls that are allowed, and is typically useful for monitoring
                applications that should not be allowed to make changes. As with
                <literal>open</literal>, this method has no scope for authentication callbacks, so
                it relies on credentials.
            </para>
            <example>
                <title>Using openReadOnly</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-2.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
            <para>
              The above example opens up a read-only connection to the system qemu hypervisor driver, checks
              to make sure it was successful, and if so closes the connection. For more information on libvirt
              URIs, refer to
              <xref linkend="libvirt_application_development_guide_using_python-Connections-URI_Formats" />.
            </para>
        </section>

        <section>
            <title>openAuth</title>
            <indexterm><primary>openAuth, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>openAuth</secondary></indexterm>
            <para>
                The <literal>openAuth</literal> function is the most flexible, and effectively
                obsoletes the previous two functions. It takes an extra parameter providing
                an Python <literal>list</literal> which contains the authentication credentials from the
                client app. The flags parameter allows
                the application to request a read-only connection with the
                <parameter>VIR_CONNECT_RO</parameter> flag if desired. A simple example Python program that uses
                <literal>openAuth</literal> with username and password credentials follows. As with
                <literal>open</literal>, this method has no scope for authentication callbacks, so
                it relies on credentials.
            </para>
            <example id="openAuth-Example1">
                <title>Using openAuth</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-3.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
            <para>
                To test the above program, the following configuration must be present:
            </para>
            <orderedlist>
                <listitem>
                    <para><filename>/etc/libvirt/libvirtd.conf</filename></para>
                    <screen>listen_tls = 0
listen_tcp = 1
auth_tcp = "sasl"</screen>
                </listitem>
                <listitem>
                    <para><filename>/etc/sasl2/libvirt.conf</filename></para>
                    <screen>mech_list: digest-md5</screen>
                </listitem>
                <listitem>
                    <para>A virt user has been added to the SASL database:</para>
                </listitem>
                <listitem>
                    <para>libvirtd has been started with <parameter>--listen</parameter></para>
                </listitem>
            </orderedlist>
            <para>
                Once the above is configured, <xref linkend="openAuth-Example1" /> can utilize the configured
                username and password and allow read-write access to libvirtd.
            </para>
            <para>
                Unlike the libvirt C interface, Python does not provide for custom callbacks to gather
                credentials.
            </para>
        </section>

        <section>
            <title>close</title>
            <indexterm><primary>close, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>close</secondary></indexterm>
            <para>
                A connection must be released by calling the <literal>close</literal> method
                of the <literal>virConnection</literal> class when no
                longer required. Connections are reference counted objects, so there should be a
                cooresponding call to the <literal>close</literal> method for each
                <literal>open</literal> function call.
            </para>
            <para>
                Connections are reference counted; the count is explicitly
                increased by the initial (<literal>open</literal>, <literal>openAuth</literal>,
                and the like); it is also temporarily
                increased by other methods that depend on the connection remaining
                alive.  The <literal>open</literal> function call should have a
                matching <literal>close</literal>, and all other references will be released
                after the corresponding operation completes.
            </para>
            <para>
                In Python reference counts can be automatically decreased when an class instace 
                goes out of scope or when the program ends.
            </para>
            <example id="close-Example">
                <title>Using close with additional references</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-5.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
            <para>
                Also note that every other class instance associated with a connection
                (virDomain, virNetwork, etc) will also hold a reference on the
                connection.
            </para>
        </section>
    </section>

    <section id="libvirt_application_development_guide_using_python-Connections-URI_Formats">
        <title>URI formats</title>
        <indexterm><primary>URI format, Connection</primary></indexterm>
        <indexterm><primary>Connections</primary>
        <secondary>URI format</secondary></indexterm>
        <para>
            Libvirt uses Uniform Resource Identifiers (URIs) to identify hypervisor connections. 
            Both local and remote hypervisors are addressed by libvirt using URIs.
            The URI scheme and path defines the hypervisor to
            connect to, while the host part of the URI determines where it is located.
        </para>
        <section id="libvirt_application_development_guide_using_python-Connections-Local_URIs">
            <title>Local URIs</title>
            <para>
                Libvirt local URIs have one of the following forms:
            </para>
<screen>driver:///system
driver:///session
driver+unix:///system
driver+unix:///session</screen>
            <para>
                All other uses of the libvirt URIs are considered remote, and
                behave as such, even if connecting to localhost. See <xref linkend="libvirt_application_development_guide_using_python-Connections-Remote_URIs" /> for details on remote URIs.
            </para>
            <para>
                The following drivers are currently supported:
            </para>
            <table id='supporteddrivers' frame='all'>
                <title>Supported Drivers</title>
                <indexterm><primary>Supported drivers, Connection</primary></indexterm>
                <indexterm><primary>Connections</primary>
                <secondary>Supported drivers</secondary></indexterm>
                <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                    <colspec colname='c1' />
                    <colspec colname='c2' />
                    <thead>
                        <row>
                            <entry><para>Driver</para></entry>
                            <entry><para>Description</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <para>qemu</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing qemu and KVM guests
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>xen</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing old-style (Xen 3.1 and older) Xen guests
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>xenapi</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing new-style Xen guests
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>uml</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing UML guests
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>lxc</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing Linux Containers
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>vbox</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing VirtualBox guests
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>openvz</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing OpenVZ containers
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>esx</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing VMware ESX guests
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>one</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing OpenNebula guests
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>phyp</para>
                            </entry>
                            <entry>
                                <para>
                                    For managing Power Hypervisor guests
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para>
                The following example shows how to connect to a local QEMU hypervisor using a local URI.
            </para>
            <example id="Example-Connect_Local">
                <title>Connecting to a local QEMU hypervisor</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-6.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section id="libvirt_application_development_guide_using_python-Connections-Remote_URIs">
            <title>Remote URIs</title>
            <indexterm><primary>Remote URIs, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>Remote URIs</secondary></indexterm>

            <para>
                Remote URIs have the general form ("[...]" meaning an optional part):
            </para>

            <screen>driver[+transport]://[username@][hostname][:port]/[path][?extraparameters]</screen>

            <para>
                Each component of the URI is described below.
            </para>

            <table id='uricomponents' frame='all'>
                <title>URI components</title>
                <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                    <colspec colname='c1' />
                    <colspec colname='c2' />
                    <thead>
                        <row>
                            <entry><para>Component</para></entry>
                            <entry><para>Description</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <para>driver</para>
                            </entry>
                            <entry>
                              <para>
                                  The name of the libvirt hypervisor driver to connect
                                  to. This is the same as that used in a local URI. Some
                                  examples are <literal>xen</literal>, <literal>qemu</literal>,
                                  <literal>lxc</literal>, <literal>openvz</literal>, and
                                  <literal>test</literal>. As a special case, the psuedo
                                  driver name <literal>remote</literal> can be used, which
                                  will cause the remote daemon to probe for an active
                                  hypervisor and pick one to use. As a general rule if the
                                  application knows what hypervisor it wants, it should
                                  always specify the explicit driver name and not rely
                                  on automatic probing.
                              </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>transport</para>
                            </entry>
                            <entry>
                                <para>
                                    The name of one of the data transports described earlier
                                    in this section. Possible values include
                                    <literal>tls</literal>, <literal>tcp</literal>,
                                    <literal>unix</literal>, <literal>ssh</literal> and
                                    <literal>ext</literal>. If omitted, it will default to
                                    <literal>tls</literal> if a hostname is provided, or
                                    <literal>unix</literal> if no hostname is provided.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>username</para>
                            </entry>
                            <entry>
                                <para>
                                    When using the SSH data transport this allows choice of
                                    a username that differs from the client's current login
                                    name.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>hostname</para>
                            </entry>
                            <entry>
                                <para>
                                  The fully qualified hostname of the remote machine.
                                  If using TLS with x509 certificates, or SASL with
                                  the GSSAPI/Keberos plug-in, it is critical that this
                                  hostname match the hostname used in the server's
                                  x509 certificates / Kerberos principle. Mis-matched
                                  hostnames will guarantee authentication failures.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>port</para>
                            </entry>
                            <entry>
                                <para>
                                    Rarely needed, unless SSH or libvirtd has been configured
                                    to run on a non-standard TCP port. Defaults to <literal>22</literal>
                                    for the SSH data transport, <literal>16509</literal> for the
                                    TCP data transport and <literal>16514</literal> for the TLS
                                    data transport.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>path</para>
                            </entry>
                            <entry>
                                <para>
                                    The path should be the same path used for the hypervisor
                                    driver's local URIs. For Xen, this is always just
                                    <literal>/</literal>, while for QEMU this would be
                                    <literal>/system</literal>.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>extraparameters</para>
                            </entry>
                            <entry>
                                <para>
                                    The URI query parameters provide the mean to fine tune
                                    some aspects of the remote connection, and are discussed
                                    in depth in the next section.
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>


            <para>
                Based on the information described here and with reference to the
                hypervisor specific URIs earlier in this document, it is now possible
                to illustrate some example remote access URIs.
            </para>

            <blockquote>
                <para>
                    Connect to a remote Xen hypervisor on host <replaceable>node.example.com</replaceable>
                    using ssh tunneled data transport and ssh username <replaceable>root</replaceable>:
                    <literal>xen+ssh://root@node.example.com/</literal>
                </para>
                <para>
                    Connect to a remote QEMU hypervisor on host <replaceable>node.example.com</replaceable>
                    using TLS with x509 certificates: <literal>qemu://node.example.com/system</literal>
                </para>
                <para>
                    Connect to a remote Xen hypervisor on host <replaceable>node.example.com</replaceable>
                    using TLS, skipping verification of the server's x509 certificate (NB: this is compromising
                    your security): <literal>xen://node.example.com/?no_verify=1</literal>
                </para>
                <para>
                    Connect to the local QEMU instances over a non-standard Unix socket (the full path to
                    the Unix socket is supplied explicitly in this case):
                    <literal>qemu+unix:///system?socket=/opt/libvirt/run/libvirt/libvirt-sock</literal>
                </para>
                <para>
                    Connect to a libvirtd daemon offering unencrypted TCP/IP connections on an alternative
                    TCP port 5000 and use the test driver with default configuration:
                    <literal>test+tcp://node.example.com:5000/default</literal>
                </para>
            </blockquote>

            <formalpara>
                <title>Extra parameters</title>
                
                <para>
                    Extra parameters can be added to remote URIs as part of the query string (the part
                    following "?"). Remote URIs understand the extra parameters shown below. Any others
                    are passed unmodified through to the backend. Note that parameter values must be
                    URI-escaped. Refer to <ulink url="http://xmlsoft.org/html/libxml-uri.html#xmlURIEscapeStr"/>
                    for more information.
                </para>
            </formalpara>

            <table id='remote_URI' frame='none'><title>Extra parameters for remote URIs</title>
                <tgroup cols='3' align='left' colsep='1' rowsep='1'>
                    <colspec colname='c1' colwidth="20%"/>
                    <colspec colname='c2' colwidth="20%"/>
                    <colspec colname='c3' colwidth="60%"/>
                    <thead>
                        <row>
                            <entry><para><emphasis role="bold">Name</emphasis></para></entry>
                            <entry><para><emphasis role="bold">Transports</emphasis></para></entry>
                            <entry><para><emphasis role="bold">Description</emphasis></para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><para><literal>name</literal></para></entry>
                            <entry><para><replaceable>any transport</replaceable></para></entry>
                            <entry>
                                <para>
                                    The local hypervisor URI passed to the remote virConnectOpen function. This URI is
                                    normally formed by removing transport, hostname, port number, username and extra
                                    parameters from the remote URI, but in certain very complex cases it may be necessary
                                    to supply the name explicitly. Example: <literal>name=qemu:///system</literal>
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><para><literal>command</literal></para></entry>
                            <entry><para>ssh, ext</para></entry>
                            <entry>
                                <para>
                                    The external command. For ext transport this is required. For ssh the default
                                    is ssh. The PATH is searched for the command. Example: <literal>command=/opt/openssh/bin/ssh</literal>
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><para><application>socket</application></para></entry>
                            <entry>
                                <para>unix, ssh</para>
                            </entry>
                            <entry>
                                <para>
                                  The external command. For ext transport this is required. For ssh
                                  the default is <literal>ssh</literal>. The PATH is searched for
                                  the command. Example: <literal>socket=/opt/libvirt/run/libvirt/libvirt-sock</literal>
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><para><application>netcat</application></para></entry>
                            <entry>
                                <para>ssh</para>
                            </entry>
                            <entry>
                                <para>
                                    The name of the netcat command on the remote machine. The default
                                    is nc. For ssh transport, libvirt constructs an ssh command which looks like:
                                    <screen>
command -p port [-l username] hostname netcat -U socket
                                    </screen>
                                    Where port, username, hostname can be specified as part of the remote URI,
                                    and command, netcat and socket come from extra parameters (or sensible
                                    defaults). Example: <literal>netcat=/opt/netcat/bin/nc</literal>
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><para><application>no_verify</application></para></entry>
                            <entry>
                                <para>tls</para>
                            </entry>
                            <entry>
                                <para>
                                    Client checks of the server's certificate are disable if a non-zero value
                                    is set. Note that to disable server checks of the client's certificate or
                                    IP address you must change the libvirtd configuration.
                                    Example: <literal>no_verify=1</literal>
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><para><application>no_tty</application></para></entry>
                            <entry>
                                <para>ssh</para>
                            </entry>
                            <entry>
                                <para>
                                    If set to a non-zero value, this stops ssh from asking for a password if
                                    it cannot log in to the remote machine automatically (For example, when
                                    using a ssh-agent). Use this when you don't have access to a terminal -
                                    for example in graphical programs which use libvirt. Example:
                                    <literal>no_tty=1</literal>
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para>
              The following example shows how to connect to a QEMU hypervisor using a remote URI.
            </para>
            <example id="Example-Connect_Remote">
                <title>Connecting to a remote QEMU hypervisor</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-7.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>
    </section>

    <section id="libvirt_application_development_guide_using_python-Connections-Capability_Info_Methods">
        <title>Capability Information Methods</title>
        <indexterm><primary>Capability information, Connection</primary></indexterm>
        <indexterm><primary>Connections</primary>
        <secondary>Capability information</secondary></indexterm>
        <indexterm><primary>getCapabilities, Connection</primary></indexterm>
        <indexterm><primary>Connections</primary>
        <secondary>getCapabilities</secondary></indexterm>
        <para>
            The <literal>getCapabilities</literal> method call can be used to obtain
            information about the capabilities of the virtualization host.  If
            successful, it returns a Python string
            containing the capabilities XML (described below). If an error
            occurred, <literal>None</literal> will be returned instead.
            The following
            code demonstrates the use of the <literal>getCapabilities</literal> method:
        </para>
        <example id="Example-getCapabilities">
            <title>Using getCapabilities</title>
            <programlisting language="Python"><xi:include href="extras/Connections-Example-8.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>
        <para>
            The capabilities XML format provides information about the host
            virtualization technology. In particular, it describes the
            capabilities of the virtualization host, the virtualization driver,
            and the kinds of guests that the virtualization technology can
            launch. Note that the capabilities XML can (and does) vary based on
            the libvirt driver in use. An example capabilities XML looks like:
        </para>
        <example>
            <title>Example QEMU driver capabilities</title>
            <programlisting language="XML"><xi:include href="extras/Connections-Example-8.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>
        <para>
            (the rest of the discussion will refer back to this XML using XPath notation).
            In the capabilities XML, there is always the <literal>/host</literal> sub-document, and zero or
            more <literal>/guest</literal> sub-documents (while zero guest sub-documents are allowed,
            this means that no guests of this particular driver can be started on this
            particular host).
        </para>

        <para>
            The <literal>/host</literal> sub-document describes the capabilities of the host.
        </para>
        <para>
            <literal>/host/uuid</literal> shows the UUID of the host.  This is derived from the
            SMBIOS UUID if it is available and valid, or can be overridden in
            libvirtd.conf with a custom value.  If neither of the above are
            properly set, a temporary UUID will be generated each time that
            libvirtd is restarted.
        </para>
        <para>
            The <literal>/host/cpu</literal> sub-document describes the capabilities of the host's
            CPUs.  It is used by libvirt when deciding whether a guest can be
            properly started on this particular machine, and is also consulted
            during live migration to determine if the destination machine supplies
            the necessary flags to continue to run the guest.
        </para>
        <para>
            <literal>/host/cpu/arch</literal> is a required XML node that describes the underlying host
            CPU architecture.  As of this writing, all libvirt drivers initialize this
            from the output of uname(2).
        </para>
        <para>
            <literal>/host/cpu/features</literal> is an optional sub-document that describes additional cpu
            features present on the host.  As of this writing, it is only used by the
            xen driver to report on the presence or lack of the svm or vmx flag, and to
            report on the presence or lack of the pae flag.
        </para>
        <para>
            <literal>/host/cpu/arch</literal> is a required XML node that describes the underlying
            host CPU architecture. As of this writing, all libvirt drivers
            initialize this from the output of uname(2).
        </para>
        <para>
            <literal>/host/cpu/model</literal> is an optional element that describes the CPU model
            that the host CPUs most closely resemble.  The list of CPU models
            that libvirt currently know about are in the cpu_map.xml file.
        </para>
        <para>
            <literal>/host/cpu/feature</literal> are zero or more elements that describe
            additional CPU features that the host CPUs have that are not covered in
            <literal>/host/cpu/model</literal>
        </para>
        <para>
            <literal>/host/cpu/features</literal> is an optional sub-document that describes
            additional cpu features present on the host. As of this writing, it
            is only used by the xen driver to report on the presence or lack of
            the svm or vmx flag, and to report on the presence or lack of the pae flag.
        </para>
        <para>
            The <literal>/host/migration_features</literal> is an optional sub-document that
            describes the migration features that this driver supports on this
            host (if any). If this sub-document does not exist, then migration is
            not supported. As of this writing, the xen, qemu, and esx drivers
            support migration.
        </para>
        <para>
            <literal>/host/migration_features/live</literal> XML node exists if the driver
            supports live migration
        </para>
        <para>
            <literal>/host/migration_features/uri_transports</literal> is an optional sub-document
            that describes alternate migration connection mechanisms. These
            alternate connection mechanisms can be useful on multi-homed
            virtualization systems. For instance, the virsh migrate command might
            connect to the source of the migration via 10.0.0.1, and the
            destination of the migration via 10.0.0.2. However, due to security
            policy, the source of the migration might only be allowed to talk
            directly to the destination of the migration via 192.168.0.0/24. In
            this case, using the alternate migration connection mechanism would
            allow this migration to succeed. As of this writing, the xen driver
            supports the alternate migration mechanism "xenmigr", while the qemu
            driver supports the alternate migration mechanism "tcp". Please see
            the documentation on migration for more information.
        </para>
        <para>
            The <literal>/host/topology</literal> sub-document describes the NUMA topology of the
            host machine; each NUMA node is represented by a
            <literal>/host/topology/cells/cell</literal>, and describes which CPUs are in that NUMA
            node. If the host machine is a UMA (non-NUMA) machine, then there will
            be only one cell and all CPUs will be in this cell. This is very
            hardware-specific, so will necessarily vary between different machines.
        </para>
        <para>
            <literal>/host/secmodel</literal> is an optional sub-document that describes the security
            model in use on the host. <literal>/host/secmodel/model</literal> shows the name of the
            security model while <literal>/host/secmodel/doi</literal> shows the Domain Of
            Interpretation. For more information about security, please see the
            Security section.
        </para>
        <para>
            Each <literal>/guest</literal> sub-document describes a kind of guest that this host driver can
            start.  This description includes the architecture of the guest (i.e. i686)
            along with the ABI provided to the guest (i.e. hvm, xen, or uml).
        </para>
        <para>
            <literal>/guest/os_type</literal> is a required element that describes the type of guest.
        </para>
        <table id='guesttypes' frame='all'>
            <title>Guest Types</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                <colspec colname='c1' />
                <colspec colname='c2' />
                <thead>
                    <row>
                        <entry><para>Driver</para></entry>
                        <entry><para>Guest Type</para></entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <para>qemu</para>
                        </entry>
                        <entry>
                            <para>
                                Always "hvm"
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>xen</para>
                        </entry>
                        <entry>
                            <para>
                                Either "xen" for a paravirtualized guest or "hvm" for a fully virtualized guest
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>uml</para>
                        </entry>
                        <entry>
                            <para>
                                Always "uml"
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                           <para>lxc</para>
                        </entry>
                        <entry>
                            <para>
                                Always "exe"
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>vbox</para>
                        </entry>
                        <entry>
                            <para>
                                Always "hvm"
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>openvz</para>
                        </entry>
                        <entry>
                            <para>
                                Always "exe"
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>one</para>
                        </entry>
                        <entry>
                            <para>
                                Always "hvm"
                            </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>ex</para>
                        </entry>
                        <entry>
                            <para>
                                Not supported at this time
                            </para>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>
            <literal>/guest/arch</literal> is the root of an XML sub-document describing various virtual
            hardware aspects of this guest type.  It has a single attribute called
            "name", which can be used to refer back to this sub-document.
        </para>
        <para>
            <literal>/guest/arch/wordsize</literal> is a required element that describes how many bits per
            word this guest type uses.  This is typically 32 or 64.
        </para>
        <para>
            <literal>/guest/arch/emulator</literal> is an optional element that describes the
            default path to the emulator for this guest type. Note that the
            emulator can be overridden by the <literal>/guest/arch/domain/emulator</literal>
            element (described below) for guest types that need alternate binaries.
        </para>
        <para>
            <literal>/guest/arch/loader</literal> is an optional element that describes the default path to
            the firmware loader for this guest type.  Note that the default loader
            path can be overridden by the <literal>/guest/arch/domain/loader</literal> element (described
            below) for guest types that use alternate loaders.  At present, this is
            only used by the xen driver for HVM guests.
        </para>
        <para>
            There can be zero or more <literal>/guest/arch/machine</literal> elements that describe
            the default types of machines that this guest emulator can
            emulate. These "machines" typically represent the ABI or hardware
            interface that a guest can be started with.  Note that these
            machine types can be overridden by the <literal>/guest/arch/domain/machine</literal>
            elements (described below) for virtualization technologies that
            provide alternate machine types. Typical values for this are "pc",
            and "isapc", meaning a regular PCI based PC, and an older, ISA based
            PC, respectively.
        </para>
        <para>
            There can be zero or more <literal>/guest/arch/domain</literal> XML sub-trees (although with
            zero /guest/arch/domain XML sub-trees, no guests of this driver can be
            started).  Each <literal>/guest/arch/domain</literal> XML sub-tree has optional &lt;emulator&gt;,
            &lt;loader&gt;, and &lt;machine&gt; elements that override the respective defaults
            specified above.  For any of the elements that are missing, the
            default values are used.
        </para>
        <para>
            The <literal>/guest/features</literal> optional sub-document describes various additional
            guest features that can be enabled or disabled, along with their
            default state and whether they can be toggled on or off.
        </para>

    </section>

    <section id="libvirt_application_development_guide_using_python-Connections-Host_Info">
        <title>Host information</title>
        <indexterm><primary>Host information, Connection</primary></indexterm>
        <indexterm><primary>Connections</primary>
        <secondary>Host information</secondary></indexterm>
        <para>
            There are various Python <literal>virConnection</literal> methods that can be used to get
            information about the virtualization host, including the hostname, maximum support guest
            CPUs, etc.
        </para>

        <section>
            <title>getHostname</title>
        <indexterm><primary>getHostName, Connection</primary></indexterm>
        <indexterm><primary>Connections</primary>
        <secondary>getHostName</secondary></indexterm>
            <para>
                The <command>getHostname</command> method can be used to obtain the hostname
                of the virtualization host as returned by <code>gethostname()</code>.  It invoked via a the
                <literal>virConnection</literal>instance and, if successful, returns a string
                containing the hostname possibly expanded to a fully-qualified domain name.
                If an error occurred, NULL will be returned
                instead.  It is the responsibility of the caller to free the memory
                returned from this method call. The following code demonstrates the use of
                <command>getHostname</command>:
            </para>
            <example id="Example-ConnectGetHostname">
                <title>Using virConnectGetHostname</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-9.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getMaxVcpus</title>
            <indexterm><primary>getMaxVcpus, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getMaxVcpus</secondary></indexterm>
            <para>
                The <command>getMaxVcpus</command> method can be used to obtain the maximum
                number of virtual CPUs per-guest the underlying virtualization
                technology supports.  It takes a 
                virtualization "type" as input (which can be <literal>None</literal>), and if successful,
                returns the number of virtual CPUs supported.  If an error occurred,
                -1 is returned instead.  The following code demonstrates the use of
                <command>getMaxVcpus</command>:
            </para>
            <example id="Example-ConnectGetMaxVcpus">
                <title>Using virConnectGetMaxVcpus</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-10.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getInfo</title>
            <indexterm><primary>getInfo, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getInfo</secondary></indexterm>
            <para>
                The <command>getInfo</command> method can be used to obtain various information
                about the virtualization host. The method returns a Python <literal>list</literal> if
                successful and <literal>None</literal> if and error occurred. The Python <literal>list</literal>
                contains the following members:
            </para>
            <table id='virNodeInfo-class-mem' frame='all'>
                <title>virNodeInfo structure members</title>
                <tgroup cols='2' align='left' colsep='1' rowsep='1'>
                    <colspec colname='c1' />
                    <colspec colname='c2' />
                    <thead>
                        <row>
                            <entry><para>Member</para></entry>
                            <entry><para>Description</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <para>listl0]</para>
                            </entry>
                            <entry>
                                <para>
                                    string indicating the CPU model
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>list[1]</para>
                            </entry>
                            <entry>
                                <para>
                                    memory size in megabytes
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>list[2]</para>
                            </entry>
                            <entry>
                                <para>
                                    the number of active CPUs
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>list[3]</para>
                            </entry>
                            <entry>
                                <para>
                                    expected CPU frequency (mhz)
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>list[4]</para>
                            </entry>
                            <entry>
                                <para>
                                    the number of NUMA nodes, 1 for uniform memory access
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>list[5]</para>
                            </entry>
                            <entry>
                                <para>
                                    number of CPU sockets per node
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>list[6]</para>
                            </entry>
                            <entry>
                                <para>
                                    number of cores per socket
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>list[7]</para>
                            </entry>
                            <entry>
                                <para>
                                    number of threads per core
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <para>
                The following code demonstrates the use of <command>virNodeGetInfo</command>:
            </para>
            <example id="Example-getInfo">
                <title>Using getInfo</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-12.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getCellsFreeMemory</title>
            <indexterm><primary>getCellsFreeMemory, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getCellsFreeMemory</secondary></indexterm>
            <para>
                The <command>getCellsFreeMemory</command> method can be used to obtain the
                amount of free memory (in kilobytes) in some or all of the NUMA
                nodes in the system.  It takes as input the starting cell 
                and the maximum number of cells to retrieve data from.
                If successful, Python <literal>list</literal> is returned with the
                amount of free memory in each node.
                On failure <literal>None</literal> is returned.  The following code
                demonstrates the use of <command>getCellsFreeMemory</command>:
            </para>
            <example id="Example-NodeGetCellsFreeMemory">
                <title>Using virNodeGetCellsFreeMemory</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-13.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getType</title>
            <indexterm><primary>getType, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getType</secondary></indexterm>
            <para>
                The <command>getType</command> method can be used to obtain the type of
                virtualization in use on this connection.
                If successful it returns a string representing
                the type of virtualization in use.
                If an error occurred, <literal>None</literal> will be returned
                instead. The following code demonstrates the use of <command>getType</command>:
            </para>
            <example id="Example-ConnectGetType">
                <title>Using virConnectGetType</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-14.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getVersion</title>
            <indexterm><primary>getVersion, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getVersion</secondary></indexterm>
            <para>
                If no name parameter is passed (or name is None) then the
                version of the libvirt library is returned as an integer.
            </para>
            <para>
                If a name is passed and it refers to a driver linked to the
                libvirt library, then this returns a tuple of (library version,
                driver version). The returned name is merely the driver
                name; for example, both KVM and QEMU guests are serviced by the
                driver for the <code>qemu://</code> URI, so a return of "QEMU" does not indicate
                whether KVM acceleration is present.
            </para>
            <para>
                If the name passed refers to a non-existent driver, then you
                will get the exception 'no support for hypervisor'.
            </para>
            <para>
                Versions numbers are integers: 1000000*major + 1000*minor + release.
            </para>
            <example id="Example-ConnectGetVersion">
                <title>Using virConnectGetVersion</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-15.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getLibVersion</title>
            <indexterm><primary>getLibVersion, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getLibVersion</secondary></indexterm>
            <para>
                The <command>getLibVersion</command> method can be used to obtain the version of
                the libvirt software in use on the host.
                If successful it returns a Python string with the version, otherwise it returns
                <literal>None</literal>. The following code demonstrates the
                use of <command>getLibVersion</command>:
            </para>
            <example id="Example-ConnectGetLibVersion">
                <title>Using virConnectGetLibVersion</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-16.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getURI</title>
            <indexterm><primary>getURI, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getURI</secondary></indexterm>
            <para>
                The <command>getURI</command> method can be used to obtain the URI for the
                current connection.  While this is typically the same string that
                was passed into the <command>open</command> call, the underlying driver can
                sometimes canonicalize the string.  This method will return the
                canonical version.  If successful, it returns a URI string. If
                an error occurred, <literal>None</literal> will be returned instead.
                The following code demonstrates the use of <command>getURI</command>:
            </para>
            <example id="Example-ConnectGetURI">
                <title>Using virConnectGetURI</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-17.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>isEncrypted</title>
            <indexterm><primary>isEncrypted, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>isEncrypted</secondary></indexterm>
            <para>
                The <command>isEncrypted</command> method can be used to find out if a given
                connection is encrypted.
                If successful it returns 1 for an encrypted connection and 0 for an
                unencrypted connection.  If an error occurred, -1 will be returned.
                The following code demonstrates the use of <command>isEncrypted</command>:
            </para>
            <example id="Example-ConnectIsEncrypted">
                <title>Using virConnectIsEncrypted</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-18.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>isSecure</title>
            <indexterm><primary>isSecure, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>isSecure</secondary></indexterm>
            <para>
                The <command>isSecure</command> method can be used to find out if a given
                connection is encrypted.  A connection will be classified secure if
                it is either encrypted or it is running on a channel which is not
                vulnerable to eavesdropping (like a UNIX domain socket).
                If successful it returns 1 for a
                secure connection and 0 for an insecure connection.  If an error
                occurred, -1 will be returned. The following code demonstrates the use
                of <command>isSecure</command>:
            </para>
            <example id="Example-ConnectIsSecure">
                <title>Using virConnectIsSecure</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-19.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>isAlive</title>
            <indexterm><primary>isAlve, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>isAlive</secondary></indexterm>
            <para>
                This method determines if the connection to the hypervisor is still alive.
                A connection will be classed as alive if it is either local, or running
                over a channel (TCP or UNIX socket) which is not closed.
            </para>
            <example id="Example-ConnectIsAlive">
                <title>Using isAlive</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-21.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>compareCPU</title>
            <indexterm><primary>compareCPU, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>compareCPU</secondary></indexterm>
            <para>
                This method compares the given CPU description with the host CPU.
            </para>
            <para>
                This XML description argument is the same used in the XML description for domain descriptions.
            </para>
            <example id="Example-ConnectCompareCPU">
                <title>Using compareCPU</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-22.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getFreeMemory</title>
            <indexterm><primary>getFreeMemory, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getFreeMemory</secondary></indexterm>
            <para>
                This method compares the given CPU description with the host CPU.
                Note: most libvirt APIs provide memory sizes in kibibytes, but in this function the returned
                value is in bytes. Divide by 1024 as necessary.
            </para>
            <example id="Example-ConnectGetFreeMemory">
                <title>Using getFreeMemory</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-23.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getFreePages</title>
            <indexterm><primary>getFreePages, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getFreePages</secondary></indexterm>
            <para>
                This method queries the host system for free pages of specified size. For the input, the
                <literal>pages</literal> argument is a Python list of page sizes that caller is
                interested in (the size unit is kibibytes, so e.g. pass 2048 for 2MB), then
                the <literal>start</literal> argument
                refers to the first NUMA node that info should be collected from, and
                <literal>cellcount</literal> argument tells how many consecutive nodes should be queried.
                The function returns a Python list containing an indicator of whether or not pages of 
                the specified input sizes are available.
            </para>
            <para>
                An error will be thrown if the host system does not support memory pages of the size requested.
            </para>
            <example id="Example-ConnectGetFreePages">
                <title>Using getFreePages</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-24.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getMemoryParameters</title>
            <indexterm><primary>getMemoryParameters, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getMemoryParameters</secondary></indexterm>
            <para>
                This method returns all the available memory parameters as strings.
            </para>
            <example id="Example-ConnectGetParameters">
                <title>Using getFreePages</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-25.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getMemoryStats</title>
            <indexterm><primary>getMemoryStats, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getMemoryStats</secondary></indexterm>
            <para>
                This method returns the memory statistics for either a single or all and single node (host).
                It returns a Python list of strings.
            </para>
            <example id="Example-ConnectGetMemoryStats">
                <title>Using getMemoryStats</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-26.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getSecurityModel</title>
            <indexterm><primary>getSecurityModel, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getSecurityModel</secondary></indexterm>
            <para>
                This method returns the security model (as a list) currently in use (if any).
            </para>
            <example id="Example-ConnectGetSecurityModel">
                <title>Using getSecurityModel</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-27.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getSysinfo</title>
            <indexterm><primary>getSysinfo, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getSysinfo</secondary></indexterm>
            <para>
                This method returns the system info in the form of an XML definition. The format is the same
                as for a Domain XML definition.
            </para>
            <example id="Example-ConnectGetSysinfo">
                <title>Using getSysinfo</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-28.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getCPUMap</title>
            <indexterm><primary>getCPUMap, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getCPUMap</secondary></indexterm>
            <para>
                Get a CPU map of host node CPUs.
            </para>
            <example id="Example-ConnectGetCPUMap">
                <title>Using getCPUMap</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-29.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getCPUStats</title>
            <indexterm><primary>getCPUStats, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getCPUStats</secondary></indexterm>
            <para>
                Get the stats for on or all CPUs.
            </para>
            <para>
                This method requires a single argument that represents the CPU number to fetch the statistics
                for a single CPU, or the value <literal>VIR_NODE_CPU_STATS_ALL_CPUS</literal> to fetch a
                Python list of statistics for all CPUs.
            </para>
            <example id="Example-ConnectGetCPUStats">
                <title>Using getCPUStats</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-30.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>getCPUModelNames</title>
            <indexterm><primary>getCPUModelNames, Connection</primary></indexterm>
            <indexterm><primary>Connections</primary>
            <secondary>getCPUModelNames</secondary></indexterm>
            <para>
                Get the list of CPU names that match an architecture type.
            </para>
            <example id="Example-ConnectGetCPUModelNames">
                <title>Using getCPUModelNames</title>
                <programlisting language="Python"><xi:include href="extras/Connections-Example-31.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

    </section>

</chapter>
