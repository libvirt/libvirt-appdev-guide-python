<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE bookinfo PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Libvirt_Application_Development_Guide_Using_Python.ent">
%BOOK_ENTITIES;
]>
<chapter id="libvirt_application_development_guide_using_python-Error_Handling">
    <title>Error Handling</title>
    <indexterm><primary>Error handling</primary></indexterm>
    <para>
        The libvirt error functions are designed to give more detailed information
        about what caused a failure in the case that a normal libvirt function or method
        returned an error.  An important thing to note about Python libvirt error
        reporting is that errors are stored on a per thread basis and not per connection.
    </para>
    <indexterm><primary>libvirtError class</primary></indexterm>
    <para>
        The libvirt Python module defines a standard exception class <literal>libvirtError</literal>
        that can be subclassed to add additional functionality when raising a libvirt exception.
        A partial definition of the <literal>libvirtError</literal> class definition looks like:
    </para>
    <example>
        <title>Libvirt module libvirtError class definition</title>
        <programlisting language="Python"><xi:include href="extras/ErrorHandling-Example-1.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </example>
    <para>
        There are a few things to note about this definition. The first is that you can instantiate this class
        by using the Python <literal>raise</literal> statement. Actually this is not of much use unless
        you subclass the <literal>libvirtError</literal> class with your own class which would contain
        the needed behaviour. You should also make note of the methods which can obtain the error
        information. A description of these methods follows:
    </para>
    <indexterm><primary>get_error_code</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_code</secondary></indexterm>
    <para>
        The method <literal>get_error_code</literal> returns the error code that was
        returned from the error. This is one of the data definition from the Python libvirt module.
        Some of the higher numbered entries from this list my not be available in your Python
        libvirt module.
    </para>
    <programlisting language="Python"><xi:include href="extras/ErrorHandling-Example-2.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    <indexterm><primary>get_error_domain</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_domain</secondary></indexterm>
    <para>
        The method <literal>get_error_domain</literal> is named that for legacy
        reasons, but really represents which part of libvirt generated the
        error.  This is one of the data definition from the Python libvirt module.
        Some of the higher numbered entries from this list my not be available in your Python
        libvirt module. The full list is:
    </para>
    <programlisting language="Python"><xi:include href="extras/ErrorHandling-Example-3.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    <indexterm><primary>get_error_message</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_message</secondary></indexterm>
    <para>
        The method <literal>get_error_message</literal> is a human-readable string
        describing the error.
    </para>
    <para>
        The method <literal>get_error_level</literal> describes the severity of the
        error. This is one of the data definition from the Python libvirt module.
        The full list of levels is:
    </para>
    <programlisting language="Python"><xi:include href="extras/ErrorHandling-Example-4.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    <indexterm><primary>get_error_str1</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_str1</secondary></indexterm>
    <para>
        The method <literal>get_error_str1</literal> gives extra human readable
        information.
    </para>
    <indexterm><primary>get_error_str2</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_str2</secondary></indexterm>
    <para>
        The method <literal>get_error_str2</literal> gives extra human readable
        information.
    </para>
    <indexterm><primary>get_error_str3</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_str3</secondary></indexterm>
    <para>
        The method <literal>get_error_str3</literal> gives extra human readable
        information.
    </para>
    <indexterm><primary>get_error_int1</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_int1</secondary></indexterm>
    <para>
        The method <literal>get_error_int1</literal> gives extra numeric information that
        may be useful for further classifying the error.
    </para>
    <indexterm><primary>get_error_int2</primary></indexterm>
    <indexterm><primary>libvirtError class</primary>
    <secondary>get_error_int2</secondary></indexterm>
    <para>
        The method <literal>get_error_int2</literal> gives extra numeric information that
        may be useful for further classifying the error.
    </para>
    <para>
        Example code that uses various parts of this structure will be
        presented in subsequent sub-sections.
    </para>

    <section id="libvirt_application_development_guide_using_python-Error_Handling-virGetLastError">
        <title>virGetLastError</title>
        <indexterm><primary>virGetLastError</primary></indexterm>
        <indexterm><primary>Functions</primary>
        <secondary>virGetLastError</secondary></indexterm>
        <para>
            The <literal>virGetLastError</literal> function can be used to obtain a 
            Python <literal>list</literal> that contains all the information
            from the error reported from libvirt. This information is kept in thread local
            storage so separate threads can safely use this function
            concurrently. Note that it does not make a copy, so error information
            can be lost if the current thread calls this function subsequently.
            The following code demonstrates
            the use of <literal>virGetLastError</literal>:
        </para>
        <example>
            <title>Using virGetLastError</title>
            <programlisting language="Python"><xi:include href="extras/Error-Example-24.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>
    </section>

    <section id="libvirt_application_development_guide_using_python-Error_Handling-Subclassing_libvirtError">
        <title>Subclassing libvirtError</title>
        <indexterm><primary>libvirtError class</primary></indexterm>
        <para>
            It is possible to subclass the <literal>libvirtError</literal> class to add functionality.
            The default <literal>libvirtError</literal> does not provide any ability to either save the error
            information or present the information to the user. Subclassing <literal>libvirtError</literal>
            allows the programer the flexibility to add any functionality needed.
            An example of this follows:
        </para>
        <example>
            <title>Subclassing libvirtError</title>
            <programlisting language="Python"><xi:include href="extras/Error-Example-25.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>
    </section>

    <section id="libvirt_application_development_guide_using_python-Error_Handling-Registering_Error_Handler">
        <title>Registering an Error Handler Function</title>
        <indexterm><primary>registerErrorHandler</primary></indexterm>
        <indexterm><primary>Functions</primary>
        <secondary>registerErrorHandler</secondary></indexterm>
        <para>
            Libvirt also supports setting up an error handler Python function. This is done using the libvirt
            function <literal>registerErrorHandler</literal>.
            Returns 1 in case of success.
        </para>
        <para>
            The registered function is called back as <code>f(ctx, error)</code>, with <literal>error</literal>
            being a list of information about the error being raised.
        </para>
        <para>
            An example of this function follows:
        </para>
        <example>
            <title>Subclassing libvirtError</title>
            <indexterm><primary>subclassing the libvirtError class</primary></indexterm>
            <programlisting language="Python"><xi:include href="extras/Error-Example-26.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>
    </section>
</chapter>
