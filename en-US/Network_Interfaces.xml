<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE bookinfo PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Libvirt_Application_Development_Guide_Using_Python.ent">
%BOOK_ENTITIES;
]>
<chapter id="libvirt_application_development_guide_using_python-Network_Interfaces">
    <title>Network Interfaces</title>
    <para>
        This section covers the management of physical network interfaces
        using the libvirt <literal>virInterface</literal> class.
    </para>

    <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Overview">
        <title>Overview</title>
        <para>
            The configuration of network interfaces on physical hosts can be
            examined and modified with methods in the <literal>virInterface</literal> class. This is
            useful for setting up the host to share one physical interface between
            multiple guest domains you want connected directly to the network
            (briefly - enslave a physical interface to the bridge, then create a
            tap device for each VM you want to share the interface), as well as
            for general host network interface management. In addition to physical
            hardware, the methods can also be used to configure bridges, bonded
            interfaces, and vlan interfaces.
        </para>
        <para>
            The <literal>virInterface</literal> class is <emphasis>not</emphasis> used to configure virtual networks (used
            to conceal the guest domain's interface behind a NAT); virtual networks are
            instead configured using the <literal>virNetwork</literal> class described in <xref linkend="libvirt_application_development_guide_using_python-Virtual_Networks" />.
        </para>
        <para>
            Each host interface is represented by an instance of the <literal>virInterface</literal> class
            and each of these has a single unique identifier:
        </para>
        <para>
            The <literal>name</literal> method returns a string unique among all interfaces (active or inactive) on a
            host. This is the same string used by the operating system to identify
            the interface (eg: "eth0" or "br1").
        </para>
        <para>
            Each interface object also has a second, non-unique index that can be
            duplicated in other interfaces on the same host:
        </para>
        <para>
            The <literal>MACString</literal> method returns an ASCII string representation of the MAC address of this
            interface. Since multiple interfaces can share the same MAC address
            (for example, in the case of VLANs), this is <emphasis>not</emphasis> a unique
            identifier. However, it can still be used to search for an interface.
        </para>
        <para>
            All interfaces configured with libvirt should be considered as
            persistent, since libvirt is actually changing the host's own
            persistent configuration data (usually contained in files somewhere
            under <filename>/etc</filename>), and not the interface itself.
        </para>
        <para>
            When a new interface is defined (using the <literal>interfaceDefineXML</literal> method), or the
            configuration of an existing interface is changed (again, with
            <literal>interfaceDefineXML</literal> method), this configuration will be stored on the host. 
            The live configuration of the interface itself will not be changed
            until the interface is restarted manually or the host is rebooted.
        </para>
    </section>

    <section id="libvirt_application_development_guide_using_python-Network_Interfaces-XML_Format">
        <title>XML Interface Description Format</title>
        <indexterm><primary>interface XML configuration</primary></indexterm>
        <para>
            The current Relax NG definition of the XML that is produced and accepted
            by <literal>interfaceDefineXML</literal> and <literal>XMLDesc</literal> can be found in the
            file <filename>data/xml/interface.rng</filename> of the <package>netcf</package> package, available at
            <ulink url="http://git.fedorahosted.org/git/netcf.git?p=netcf.git;a=tree">http://git.fedorahosted.org/git/netcf.git?p=netcf.git;a=tree</ulink>. Below are some examples of common interface configurations.
        </para>
        <example>
            <title>XML definition of an ethernet interface using DHCP</title>
            <programlisting language="XML"><xi:include href="extras/NetworkInterface-Example-1.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>

        <example>
            <title>XML definition of an ethernet interface with static IP</title>
            <programlisting language="XML"><xi:include href="extras/NetworkInterface-Example-2.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>

        <example>
            <title>XML definition of a bridge device with eth0 and eth1 attached</title>
            <programlisting language="XML"><xi:include href="extras/NetworkInterface-Example-3.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>

        <example>
            <title>XML definition of a vlan interface associated with eth0</title>
            <programlisting language="XML"><xi:include href="extras/NetworkInterface-Example-4.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </example>
    </section>

    <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Information">
      <title>Retrieving Information About Interfaces</title>

      <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Information-Listing">
          <title>Enumerating Interfaces</title>
          <indexterm><primary>numOfInterfaces</primary></indexterm>
          <indexterm><primary>Interfaces</primary>
          <secondary>numOfInterfaces</secondary></indexterm>
          <indexterm><primary>numOfDefinedInterfaces</primary></indexterm>
          <indexterm><primary>Interfaces</primary>
          <secondary>numOfDefinedInterfaces</secondary></indexterm>
          <indexterm><primary>listInterfaces</primary></indexterm>
          <indexterm><primary>Interfaces</primary>
          <secondary>listInterfaces</secondary></indexterm>
          <indexterm><primary>listDefinedInterfaces</primary></indexterm>
          <indexterm><primary>Interfaces</primary>
          <secondary>listDefinedInterfaces</secondary></indexterm>
          <para>
              Once you have a connection to a host you can determine
              the number of interfaces on the host with <literal>numOfInterfaces</literal>
              and <literal>numOfDefinedInterfaces</literal> method. A list of those interfaces'
              names can be obtained with <literal>listInterfaces</literal> method and
              <literal>listDefinedInterfaces</literal> method ("defined" interfaces are those that
              have been defined, but are currently inactive).  
              The list methods return a Python <literal>list</literal>.
              All four functions return <literal>None</literal> if an error is encountered.
          </para>

          <example>
              <title>Getting a list of active ("up") interfaces on a host</title>
              <para>
                  Note: error handling omitted for clarity
              </para>
              <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-5.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
          </example>
          <example>
              <title>Getting a list of inactive ("down") interfaces on a host</title>
              <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-6.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
          </example>
      </section>

      <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Information-Fetching">
          <title>Obtaining a virInterface instance for an Interface</title>

          <para>
              Many operations require that you have an instance of <literal>virInterface</literal>, but you may
              only have the name or MAC address of the interface. You can use
              <literal>interfaceLookupByName</literal> and <literal>interfaceLookupByMACString</literal> to get the
              <literal>virInterface</literal> instance in these cases.
          </para>

          <example>
              <title>Fetching the virInterface instance for a given interface name</title>
              <para>
                  Note: error handling omitted for clarity
              </para>
              <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-7.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
          </example>

          <example>
              <title>Fetching the virInterface instance for a given interface MAC Address</title>
              <para>
                  Note: error handling omitted for clarity
              </para>
              <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-8.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
          </example>
      </section>

      <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Information-Detail">
          <title>Retrieving Detailed Interface Information</title>

          <para>
              You may also find yourself with a <literal>virInterface</literal> instance, and need the name
              or MAC address of the interface, or want to examine the full interface
              configuration. The <literal>name</literal>, <literal>MACString</literal>, and
              <literal>XMLDesc</literal> methods provide this capability.
          </para>

          <example>
              <title>Fetching the name and mac address from an interface object</title>
              <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-9.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
          </example>

          <example>
              <title>Fetching the XML configuration string from an interface object</title>
              <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-10.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
          </example>
        </section>

      <section id="libvirt_application_development_guide_using_python-Network_Interface-Addresses">
          <title>Retrieving Interface Network Addresses</title>

          <para>
              You may find yourself with a <literal>virDomain</literal> instance, and need the IP
              addresses of one or more guest domain interfaces.
              The <literal>interfaceAddresses</literal> method provides this capability.
          </para>

          <example>
              <title>Fetching the IP addresses of all the guest domain network interfaces</title>
              <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-14.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
          </example>
        </section>
    </section>

    <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Configs">
        <title>Managing interface configuration files</title>
        <para>
            In libvirt, "defining" an interface means creating or changing the
            configuration, and "undefining" means deleting that configuration from
            the system. Newcomers may sometimes confuse these two operations with
            Create/Delete (which actually are used to activate and deactivate an
            existing interface - see <xref linkend="libvirt_application_development_guide_using_python-Network_Interfaces-Lifecycle" />).
        </para>

        <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Configs-Define">
            <title>Defining an interface configuration</title>
            <indexterm><primary>interfaceDefineXML</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>interfaceDefineXML</secondary></indexterm>
            <indexterm><primary>create</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>create</secondary></indexterm>
            <para>
                The <literal>interfaceDefineXML</literal> method is used for both adding new interface configurations
                and modifying existing configurations. It either adds a new interface
                (with all information, including the interface name, given in the XML
                data) or modifies the configuration of an existing interface. The
                newly defined interface will be inactive until separate action is
                taken to make the new configuration take effect (for example,
                rebooting the host, or calling <literal>create</literal>, described in
                <xref linkend="libvirt_application_development_guide_using_python-Network_Interfaces-Lifecycle" />)
            </para>
            <para>
                If the interface is successfully added/modified in the host's
                configuration, <literal>interfaceDefineXML</literal> returns a <literal>virInterface</literal> instance. 
                This can be used as a handle to perform further actions on the new interface,
                for example making it active with <literal>create</literal>.
            </para>
            <para>
                Currently the flags parameter should always be <code language="Python">0</code>.
            </para>
            <example id="Example-Defining_a_new_interface">
                <title>Defining a new interface</title>
                <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-11.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Configs-Undefine">
            <title>Undefining an interface configuration</title>
            <indexterm><primary>undefine</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>undefine</secondary></indexterm>
            <indexterm><primary>XMLDesc</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>XMLDesc</secondary></indexterm>
            <para>
                The <literal>undefine</literal> method completely and permanently removes the
                configuration for the given interface from the host's configuration
                files. If you want to recreate this configuration again in the
                future, you should invoke the  <literal>XMLDesc</literal> method and save the string
                prior to the undefine.
            </para>
            <example>
                <title>Undefining br0 interface after saving its XML data</title>
                <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-12.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>changeRollback</title>
            <indexterm><primary>changeRollback, Connection</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>changeRollback</secondary></indexterm>
            <para>
                This method rolls back all defined interface definitions since the last call to the
                <literal>changeCommit</literal> method was called.
            </para>
            <para>
                Note: An error will be thrown if no interface definitions are pending.
            </para>
            <example id="Example-ConnectChangeRollback">
                <title>Using changeRollback</title>
                <programlisting language="Python"><xi:include href="extras/Networkinterface-Example-15.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>changeBegin</title>
            <indexterm><primary>changeBegin, Connection</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>changeBegin</secondary></indexterm>
            <para>
                This method creates a restore point to which one can return later by calling
                <literal>changeRollback</literal> method. This function should be called before any transaction
                with interface configuration. Once it is known that a new configuration works, it can be committed
                via the <literal>changeCommit</literal> method, which frees the restore point.
            </para>
            <para>
                If the <literal>changeBegin</literal> method is called when a transaction is already opened,
                an error will be thrown.
            </para>
            <example id="Example-ConnectChangeBegin">
                <title>Using changeBegin</title>
                <programlisting language="Python"><xi:include href="extras/Networkinterface-Example-16.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <section>
            <title>changeCommit</title>
            <indexterm><primary>changeCommit, Connection</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>changeCommit</secondary></indexterm>
            <para>
                This commits the changes made to interfaces and frees the restore point created by
                the <literal>changeBegin</literal> method.
            </para>
            <example id="Example-ConnectChangeCommit">
                <title>Using changeCommit</title>
                <programlisting language="Python"><xi:include href="extras/Networkinterface-Example-17.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>
    </section>

    <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Lifecycle">
        <title>Interface lifecycle management</title>
        <para>
            In libvirt parlance, "creating" an interface means making it active,
            or "bringing it up", and "deleting" an interface means making it
            inactive, or "bringing it down". On hosts using the <package>netcf</package> backend for
            interface configuration, such as Fedora and Red Hat Enterprise Linux, this is the same as calling
            the system shell scripts <command>ifup</command> and <command>ifdown</command> for the interface.
        </para>

        <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Lifecycle-Activate">
            <title>Activating an interface</title>
            <para>
                The <literal>create</literal> method makes the given inactive interface active
                ("up"). On success, it returns 0. If there is any problem making the
                interface active, -1 is returned. <xref linkend="Example-Defining_a_new_interface" /> shows
                typical usage of this method.
            </para>
        </section>

        <section id="libvirt_application_development_guide_using_python-Network_Interfaces-Lifecycle-Deactivate">
            <title>Deactivating an interface</title>
            <indexterm><primary>destroy</primary></indexterm>
            <indexterm><primary>Interfaces</primary>
            <secondary>destroy</secondary></indexterm>
            <para>
                The <literal>destroy</literal> method makes the given interface inactive ("down"). On
                success, it returns 0. If there is any problem making the interface
                active, -1 is returned.
            </para>
            <example>
                <title>Temporarily bring down eth2, then bring it back up</title>
                <programlisting language="Python"><xi:include href="extras/NetworkInterface-Example-12.py" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>
    </section>

</chapter>

